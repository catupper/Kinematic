#!/usr/bin/env python
# -*- coding: utf-8 -*-

import numpy as np
import pygame
from pygame.locals import *





WHITE = (255, 255, 255)
RED = (255, 0, 0)


pygame.init()
WIDTH = 700
HEIGHT = 700
screen = pygame.display.set_mode( (WIDTH, HEIGHT) )
pygame.display.set_caption("inv Kinematic")
Sprite=pygame.sprite.Sprite

def IdenticalMatrix(n):
    return np.matrix([[float(j==i) for j in range(n)] for i in range(n)])

def addMatrix(a):
    dim = len(a)
    raw = [[0] * (dim+1) for i in range(dim + 1)]
    for i in range(dim+1):
        raw[i][i] = 1
    for i in range(dim):
        raw[i][-1] = a[i]

    return np.matrix(raw)

def rotateMatrix(theta):
    return np.matrix([[np.cos(theta), np.sin(theta), 0],
                      [-np.sin(theta), np.cos(theta), 0],
                      [0, 0, 1]])
    
    

class swit(Sprite):
    def __init__ (self,x,y):
        Sprite.__init__(self)
        self.color=(0,0,0)
        self.image=pygame.Surface((Square_size-2,Square_size-2))
        self.image.fill(self.color)
        self.rect=pygame.Rect(x*Square_size+1,y*Square_size+1,(x+1)*Square_size-2,(y+1)*Square_size-2)
        self.mode=0

    def update(self):
	if(self.mode==0):self.color=(100,0,0)
	if(self.mode==1):self.color=(255,0,0)
	if(self.mode>=2):self.color=(self.color[0],120,120)
        self.image.fill(self.color)
    def draw(self,screen):
        screen.blit(self.image,self.rect)

        
class RotateArm():
    def __init__(self, length):
        self.width = 10
        self.length = length
        self.mat = IdenticalMatrix(3)
        self.basepos = (0, 0)
        self.edgepos = (0, self.length)
        self.mat = rotateMatrix(0)
        self.color = RED
        
    def setPos(self, mat):
        base = np.matrix([[0],
                         [0],
                         [1]])
        edge = np.matrix([[0],
                          [self.length],
                          [1]])
        
        base = mat * base
        self.basepos = (base[0,0], base[1,0])
        edge = mat * edge
        self.edgepos = (edge[0,0], edge[1,0])
        
    def setParm(self, theta):
        self.mat = rotateMatrix(theta) * addMatrix((0, self.length))
        
        
    def getMatrix(self):
        return self.mat
    
    def draw(self, screen):
        print self.basepos, self.edgepos
        pygame.draw.line(screen, self.color, self.basepos, self.edgepos, 10)
        
class Linkage():
    def __init__(self, pos, parts):
        self.pos = pos
        self.parts = parts
        self.partscnt = len(parts)

    def getLastpos(self, parms):
        if(len(parms) != self.partscnt):
            print "number of parametors dosen't match!!1"
            return

        pos = parms[-1].getMatrix() * np.matrix([[0],
                                                 [0],
                                                 [1]])
        
        return (pos[0,0] + self.pos[0], pos[1,0] + self.pos[1])

    def forward(self, parms):
        if(len(parms) != self.partscnt):
            print "number of parametors dosen't match!!"
            return

        mat = addMatrix(self.pos)
        for i in range(len(parms)):
            self.parts[i].setParm(parms[i])
            self.parts[i].setPos(mat)
            mat *= self.parts[i].getMatrix()
        
    def draw(self, screen):
        screen.fill(WHITE)
        mat = IdenticalMatrix(3)
        for part in self.parts:
            part.draw(screen)

    

        
def main():
    sysfont = pygame.font.SysFont(None, 80)
    clock=pygame.time.Clock()

    parts = [RotateArm(50), RotateArm(70)]
    
    linkage = Linkage((WIDTH/2, HEIGHT/2), parts)
    
    while True:
        clock.tick(60)
        screen.fill((0,0,255))
        x, y = pygame.mouse.get_pos()
        print x,y
        linkage.forward((x, y))
        linkage.draw(screen)
        pygame.display.flip()


if __name__ == "__main__":
    main()
